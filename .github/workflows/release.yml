name: Release
on:
    workflow_dispatch:


jobs:
    build:
        name: build
        runs-on: ${{ matrix.os }}
        strategy:
            matrix: 
                compiler: [clang, gcc, msvc]
                os: [ubuntu-latest, macos-latest, windows-latest]
                exclude:
                    # MSVC only works on Windows.
                    - os: ubuntu-latest
                      compiler: msvc
                    # - os: ubuntu-latest
                    #   compiler: gcc
                    - os: macos-latest
                      compiler: msvc
                    # Not testing with GCC on macOS.
                    - os: macos-latest
                      compiler: gcc
                    # Only testing with MSVC on Windows.
                    - os: windows-latest
                      compiler: clang
                    - os: windows-latest
                      compiler: gcc
                include:
                    - compiler: clang
                      CC: clang
                      CXX: clang++
                    - compiler: gcc
                      CC: gcc
                      CXX: g++
                    - compiler: msvc
                      CC:
                      CXX:

        env:
            CMAKE_BUILD_DIR: ${{ github.workspace }}/build
            CMAKE_BUILD_TYPE: ${{ 'Release' }}
            CC: ${{ matrix.CC }}
            CXX: ${{ matrix.CXX }}
            BINARY_SUFFIX: ${{ startsWith(matrix.os, 'windows') && '.exe' || '' }}
            BINARY_PATH: >-
                    ${{ format(
                    startsWith(matrix.os, 'windows') && '{0}\build\{1}\' || '{0}/build/',
                    github.workspace,
                    'Release') }}

        steps:
            - uses: actions/checkout@v4
              with:
                submodules: true
            
            - name: Install dependencies on Linux
              if: ${{ runner.os=='Linux' }}
              run: |
                sudo apt-get update
                sudo apt-get install libkyotocabinet-dev libsnappy-dev

            - name: Generate build config
              run: >-
                cmake -S "${{ github.workspace }}" -B "${{ env.CMAKE_BUILD_DIR }}"
                -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
                -DBUILD_SHARED_LIBS=ON

            - name: Build leveldb
              run: >-
                cmake
                --build "${{ env.CMAKE_BUILD_DIR }}"
                --config "${{ env.CMAKE_BUILD_TYPE }}"

            - name: Show
              run: |
                cd build
                ll

            - name: upload Mac
              if: matrix.os == 'macos-latest'
              uses: actions/upload-artifact@v4
              with:
                name: release-mac
                path: build/*.dylib

            - name: upload Linux
              if: matrix.os == 'ubuntu-latest'
              uses: actions/upload-artifact@v4
              with:
                name: release-Linux
                path: build/*.so

            - name: upload Windows
              if: matrix.os == 'windows-latest'
              uses: actions/upload-artifact@v4
              with:
                name: release-windows
                path: build/Release/leveldb.dll


